import torch
import torch.nn as nn

# Device Configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Hyper-parameters
input_size = 0
num_layers = 2
num_classes = 5
batch_size = 0
num_epochs = 2
learning_rate = 1e-4


class RNN_car(nn.Module):
    def __init__(self, input_size, num_classes):
        super(RNN_car, self).__init__()
        self.layer1 = nn.Sequential(
                nn.Linear(input_size, 256)
                nn.ReLU())
        self.layer2 = nn.Sequential(
                nn.Linear(256, 512)
                nn.ReLU())
        self.layer3 = nn.Sequential(
                nn.Linear(512, 1024)
                nn.ReLU())
        self.lstm = nn.LSTM(1024, num_classes, num_layers=2)

    def forward(self, x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = self.layer3(out)
        return out
